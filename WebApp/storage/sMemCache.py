import memcache, json, randomfrom lib.config import CFGclass MecacheHandle:    mcHandle = []    KeyPrefix = ''        _poolCursor = -1        _instance = None    _hostName = None    def __init__(self, hostName, poolSize = 1):        self._hostName = hostName        for i in range(poolSize):            Host = CFG().getOption("memcache", hostName)            self.mcHandle.apend(memcache.Client(Host))                self.poolSize = poolSize            def __new__(self, hostName, poolSize =1):        if not self._instance and self._hostName != hostName:              self._instance = super(MecacheHandle, self).__new__(                                          self, hostName, poolSize)          return self._instance    def __del__(self):        for handler in self.mcHandle.pop(): pass                def _getHandle(self):        if self._poolCursor == self.poolSize: self._poolCursor = 0        else: self._poolCursor += 1                return self.mcHandle[self._poolCursor]    def set(self, key, value, time=0):        key = self._getKey(key)        return self._getHandle().get(key, value, time)    def setMuli(self, dic, time=0, prefix=''):        key = self._getKey(key)        return self._getHandle()(dic, time, prefix)    def delete(self, key):        key = self._getKey(key)        return self._getHandle().delete(key)    def setJson(self, key, value, time=0):        value = json.dumps(value)        return self.set(key, value, time)    def get(self, key):        key = self._getKey(key)        return self._getHandle().get(key)    def getJson(self, key):        try:            return json.loads(self.get(key))        except:            return None    def counter(self, key, delta=1):        key = self._getKey(key)        return self._getHandle()(key, delta)       def _getKey(self, key):        return self.KeyPrefix + str(key)